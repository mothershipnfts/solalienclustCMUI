[{"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\AppBar.tsx":"1","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\CandyMint.tsx":"2","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\ContentContainer.tsx":"3","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\Footer.tsx":"4","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\nav-element\\index.tsx":"5","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\Notification.tsx":"6","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\SendTransaction.tsx":"7","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\SendVersionedTransaction.tsx":"8","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\SignMessage.tsx":"9","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\Text\\index.tsx":"10","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\contexts\\AutoConnectProvider.tsx":"11","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\contexts\\ContextProvider.tsx":"12","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\contexts\\NetworkConfigurationProvider.tsx":"13","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\hooks\\useQueryContext.tsx":"14","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\models\\types.ts":"15","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\pages\\api\\hello.ts":"16","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\pages\\index.tsx":"17","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\pages\\_app.tsx":"18","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\pages\\_document.tsx":"19","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\stores\\useNotificationStore.tsx":"20","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\stores\\useUserSOLBalanceStore.tsx":"21","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\utils\\explorer.ts":"22","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\utils\\index.tsx":"23","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\utils\\notifications.tsx":"24","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\views\\home\\index.tsx":"25","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\views\\index.tsx":"26"},{"size":5218,"mtime":1722585111709,"results":"27","hashOfConfig":"28"},{"size":4465,"mtime":1722581624917,"results":"29","hashOfConfig":"28"},{"size":1283,"mtime":1722584702627,"results":"30","hashOfConfig":"28"},{"size":5123,"mtime":1722581151893,"results":"31","hashOfConfig":"28"},{"size":1702,"mtime":1722584867317,"results":"32","hashOfConfig":"28"},{"size":4399,"mtime":1687585374000,"results":"33","hashOfConfig":"28"},{"size":3468,"mtime":1687585374000,"results":"34","hashOfConfig":"28"},{"size":3425,"mtime":1687585374000,"results":"35","hashOfConfig":"28"},{"size":2470,"mtime":1687585374000,"results":"36","hashOfConfig":"28"},{"size":1558,"mtime":1687585374000,"results":"37","hashOfConfig":"28"},{"size":962,"mtime":1687585374000,"results":"38","hashOfConfig":"28"},{"size":2364,"mtime":1722588499667,"results":"39","hashOfConfig":"28"},{"size":892,"mtime":1687585374000,"results":"40","hashOfConfig":"28"},{"size":566,"mtime":1687585374000,"results":"41","hashOfConfig":"28"},{"size":62,"mtime":1687585374000,"results":"42","hashOfConfig":"28"},{"size":307,"mtime":1687585374000,"results":"43","hashOfConfig":"28"},{"size":381,"mtime":1722566652340,"results":"44","hashOfConfig":"28"},{"size":996,"mtime":1687585374000,"results":"45","hashOfConfig":"28"},{"size":527,"mtime":1687585374000,"results":"46","hashOfConfig":"28"},{"size":420,"mtime":1687585374000,"results":"47","hashOfConfig":"28"},{"size":796,"mtime":1687585374000,"results":"48","hashOfConfig":"28"},{"size":741,"mtime":1687585374000,"results":"49","hashOfConfig":"28"},{"size":909,"mtime":1687585374000,"results":"50","hashOfConfig":"28"},{"size":461,"mtime":1687585374000,"results":"51","hashOfConfig":"28"},{"size":2582,"mtime":1722588351600,"results":"52","hashOfConfig":"28"},{"size":36,"mtime":1722570353523,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"1n52u14",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\AppBar.tsx",["113"],"import { FC } from 'react';\nimport Link from \"next/link\";\nimport dynamic from 'next/dynamic';\nimport React, { useState } from \"react\";\nimport { useAutoConnect } from '../contexts/AutoConnectProvider';\nimport NavElement from './nav-element';\n\nconst WalletMultiButtonDynamic = dynamic(\n  async () => (await import('@solana/wallet-adapter-react-ui')).WalletMultiButton,\n  { ssr: false }\n);\n\nexport const AppBar: React.FC = () => {\n  const { autoConnect, setAutoConnect } = useAutoConnect();\n  const [isNavOpen, setIsNavOpen] = useState(false);\n  return (\n    <div>\n      {/* NavBar / Header */}\n      <div className=\"navbar flex h-20 flex-row md:mb-2 shadow-lg bg-black text-neutral-content border-b border-zinc-600 bg-opacity-66\">\n        <div className=\"navbar-start align-items-center\">\n          <div className=\"hidden sm:inline w-22 h-22 md:p-2 ml-10\">\n            <Link href=\"https://mothershipnfts.com/\" target=\"_blank\" rel=\"noopener noreferrer\" passHref className=\"text-secondary hover:text-white\">\n              <img src=\"/solanalogo.png\" alt=\"Solana Logo\" className=\"w-full h-auto\" />\n          \n              <svg width=\"100%\" height=\"0\" viewBox=\"0 0 656 96\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n\n              <defs>\n  <linearGradient id=\"paint0_linear_1064_606\" x1=\"10.81\" y1=\"98.29\" x2=\"98.89\" y2=\"-1.01005\" gradientUnits=\"userSpaceOnUse\">\n    <stop offset=\"0.08\" stopColor=\"#006400\" /> \n    <stop offset=\"0.3\" stopColor=\"#228B22\" /> \n    <stop offset=\"0.5\" stopColor=\"#32CD32\" /> \n    <stop offset=\"0.6\" stopColor=\"#7CFC00\" /> \n    <stop offset=\"0.72\" stopColor=\"#ADFF2F\" /> \n    <stop offset=\"0.97\" stopColor=\"#00FF00\" /> \n  </linearGradient>\n\n                  <clipPath id=\"clip0_1064_606\">\n                    <rect width=\"646\" height=\"96\" fill=\"white\" />\n                  </clipPath>\n                </defs>\n              </svg>\n            </Link>\n          </div>\n          <WalletMultiButtonDynamic className=\"btn-ghost btn-sm relative flex md:hidden text-lg \" />\n        </div>\n\n        {/* Nav Links */}\n        {/* Wallet & Settings */}\n        <div className=\"navbar-end\">\n          <div className=\"hidden md:inline-flex align-items-center justify-items gap-6\">\n          <NavElement\n            label=\"Mint\"\n            href=\"/\"\n            navigationStarts={() => setIsNavOpen(false)}\n          />\n          <NavElement\n            label=\"Collection\"\n            href=\"https://magiceden.io/marketplace/msac\"\n            navigationStarts={() => setIsNavOpen(false)}\n          />\n          <WalletMultiButtonDynamic className=\"btn-ghost btn-sm rounded-btn text-lg mr-6 \" />\n        </div>\n          <label\n              htmlFor=\"my-drawer\"\n              className=\"btn-gh items-center justify-between md:hidden mr-6\"\n              onClick={() => setIsNavOpen(!isNavOpen)}>\n              <div className=\"HAMBURGER-ICON space-y-2.5 ml-5\">\n              <div className={`h-0.5 w-8 bg-purple-600 ${isNavOpen ? 'hidden' : ''}`} />\n              <div className={`h-0.5 w-8 bg-purple-600 ${isNavOpen ? 'hidden' : ''}`} />\n              <div className={`h-0.5 w-8 bg-purple-600 ${isNavOpen ? 'hidden' : ''}`} />\n            </div>\n            <div className={`absolute block h-0.5 w-8 animate-pulse bg-purple-600 ${isNavOpen ? \"\" : \"hidden\"}`}\n              style={{ transform: \"rotate(45deg)\" }}>\n            </div>\n            <div className={`absolute block h-0.5 w-8 animate-pulse bg-purple-600 ${isNavOpen ? \"\" : \"hidden\"}`}\n              style={{ transform: \"rotate(135deg)\" }}>\n            </div>\n        </label>\n      <div>\n        <span className=\"absolute block h-0.5 w-12 bg-zinc-600 rotate-90 right-14\"></span>\n      </div>\n        <div className=\"dropdown dropdown-end\">\n          <div tabIndex={0} className=\"btn btn-square btn-ghost text-right mr-4\">\n            <svg className=\"w-7 h-7\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n            </svg>\n          </div>\n          <ul tabIndex={0} className=\"p-2 shadow menu dropdown-content bg-base-100 rounded-box sm:w-52\">\n            <li>\n              <div className=\"form-control bg-opacity-100\">\n                <label className=\"cursor-pointer label\">\n                  <a>Autoconnect</a>\n                  <input type=\"checkbox\" checked={autoConnect} onChange={(e) => setAutoConnect(e.target.checked)} className=\"toggle\" />\n                </label>             \n              </div>\n            </li>\n          </ul>\n        </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\CandyMint.tsx",["114","115"],"import { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { FC, useCallback, useMemo } from 'react';\nimport { notify } from \"../utils/notifications\";\nimport useUserSOLBalanceStore from '../stores/useUserSOLBalanceStore';\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { generateSigner, transactionBuilder, publicKey, some } from '@metaplex-foundation/umi';\nimport { fetchCandyMachine, mintV2, mplCandyMachine, safeFetchCandyGuard } from \"@metaplex-foundation/mpl-candy-machine\";\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\nimport { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';\nimport { setComputeUnitLimit } from '@metaplex-foundation/mpl-toolbox';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport * as bs58 from 'bs58';\n\n// These access the environment variables we defined in the .env file\nconst quicknodeEndpoint = process.env.NEXT_PUBLIC_RPC || clusterApiUrl('devnet');\nconst candyMachineAddress = publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\nconst treasury = publicKey(process.env.NEXT_PUBLIC_TREASURY);\n\nexport const CandyMint: FC = () => {\n    // 👇 Update these constant declarations\n    const { connection } = useConnection();\n    const wallet = useWallet();\n    const { getUserSOLBalance } = useUserSOLBalanceStore();\n\n    // CREATE UMI INSTANCE\n    const umi = useMemo(() =>\n        createUmi(quicknodeEndpoint)\n            .use(walletAdapterIdentity(wallet))\n            .use(mplCandyMachine())\n            .use(mplTokenMetadata()),\n        [wallet, mplCandyMachine, walletAdapterIdentity, mplTokenMetadata, quicknodeEndpoint, createUmi]\n    );\n\n    // 👇 MINTING LOGIC\n    const onClick = useCallback(async () => {\n        if (!wallet.publicKey) {\n            console.log('error', 'Wallet not connected!');\n            notify({ type: 'error', message: 'error', description: 'Wallet not connected!' });\n            return;\n        }\n\n        // Fetch the Candy Machine.\n        const candyMachine = await fetchCandyMachine(\n            umi,\n            candyMachineAddress,\n        );\n        // Fetch the Candy Guard.\n        const candyGuard = await safeFetchCandyGuard(\n            umi,\n            candyMachine.mintAuthority,\n        );\n        try {\n            // Mint from the Candy Machine.\n            const nftMint = generateSigner(umi);\n            const transaction = await transactionBuilder()\n                .add(setComputeUnitLimit(umi, { units: 800_000 }))\n                .add(\n                    mintV2(umi, {\n                        candyMachine: candyMachine.publicKey,\n                        candyGuard: candyGuard?.publicKey,\n                        nftMint,\n                        collectionMint: candyMachine.collectionMint,\n                        collectionUpdateAuthority: candyMachine.authority,\n                        mintArgs: {\n                            solPayment: some({ destination: treasury }),\n                        },\n                    })\n                );\n            const { signature } = await transaction.sendAndConfirm(umi, {\n                confirm: { commitment: \"confirmed\" },\n            });\n            const txid = bs58.encode(signature);\n            console.log('success', `Mint successful! ${txid}`)\n            notify({ type: 'success', message: 'Mint successful!', txid });\n\n            getUserSOLBalance(wallet.publicKey, connection);\n        } catch (error: any) {\n            notify({ type: 'error', message: `Error minting!`, description: error?.message });\n            console.log('error', `Mint failed! ${error?.message}`);\n        }\n    }, [wallet, connection, getUserSOLBalance, umi, candyMachineAddress, treasury]);\n    \n\n    return (\n        <div className=\"flex flex-row justify-center\">\n            <div className=\"relative group items-center\">\n                <div className=\"m-1 absolute -inset-0.5 bg-gradient-to-r from-green-400 to-green-600 \n                    rounded-lg blur opacity-20 group-hover:opacity-100 transition duration-1000 group-hover:duration-200 animate-tilt\"></div>\n                <button\n                    className=\"px-8 m-2 btn animate-pulse bg-gradient-to-br from-green-400 to-green-600 hover:from-green-300 hover:to-green-500 text-black\"\n                    onClick={onClick}\n                >\n                    <span>Mint NFT </span>\n                </button>\n            </div>\n        </div>\n    );\n};\n\n","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\ContentContainer.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\Footer.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\nav-element\\index.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\Notification.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\SendTransaction.tsx",["116"],"import { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Keypair, SystemProgram, Transaction, TransactionMessage, TransactionSignature, VersionedTransaction } from '@solana/web3.js';\nimport { FC, useCallback } from 'react';\nimport { notify } from \"../utils/notifications\";\n\nexport const SendTransaction: FC = () => {\n    const { connection } = useConnection();\n    const { publicKey, sendTransaction } = useWallet();\n\n    const onClick = useCallback(async () => {\n        if (!publicKey) {\n            notify({ type: 'error', message: `Wallet not connected!` });\n            console.log('error', `Send Transaction: Wallet not connected!`);\n            return;\n        }\n\n        let signature: TransactionSignature = '';\n        try {\n\n            // Create instructions to send, in this case a simple transfer\n            const instructions = [\n                SystemProgram.transfer({\n                    fromPubkey: publicKey,\n                    toPubkey: Keypair.generate().publicKey,\n                    lamports: 1_000_000,\n                }),\n            ];\n\n            // Get the lates block hash to use on our transaction and confirmation\n            let latestBlockhash = await connection.getLatestBlockhash()\n\n            // Create a new TransactionMessage with version and compile it to legacy\n            const messageLegacy = new TransactionMessage({\n                payerKey: publicKey,\n                recentBlockhash: latestBlockhash.blockhash,\n                instructions,\n            }).compileToLegacyMessage();\n\n            // Create a new VersionedTransacction which supports legacy and v0\n            const transation = new VersionedTransaction(messageLegacy)\n\n            // Send transaction and await for signature\n            signature = await sendTransaction(transation, connection);\n\n            // Send transaction and await for signature\n            await connection.confirmTransaction({ signature, ...latestBlockhash }, 'confirmed');\n\n            console.log(signature);\n            notify({ type: 'success', message: 'Transaction successful!', txid: signature });\n        } catch (error: any) {\n            notify({ type: 'error', message: `Transaction failed!`, description: error?.message, txid: signature });\n            console.log('error', `Transaction failed! ${error?.message}`, signature);\n            return;\n        }\n    }, [publicKey, notify, connection, sendTransaction]);\n\n    return (\n        <div className=\"flex flex-row justify-center\">\n            <div className=\"relative group items-center\">\n                <div className=\"m-1 absolute -inset-0.5 bg-gradient-to-r from-indigo-500 to-fuchsia-500 \n                rounded-lg blur opacity-20 group-hover:opacity-100 transition duration-1000 group-hover:duration-200 animate-tilt\"></div>\n                    <button\n                        className=\"group w-60 m-2 btn animate-pulse bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black\"\n                        onClick={onClick} disabled={!publicKey}\n                    >\n                        <div className=\"hidden group-disabled:block \">\n                        Wallet not connected\n                        </div>\n                         <span className=\"block group-disabled:hidden\" >\n                            Send Transaction\n                        </span>\n                    </button>\n             </div>\n        </div>\n    );\n};\n","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\SendVersionedTransaction.tsx",["117"],"import { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Keypair, SystemProgram, TransactionMessage, TransactionSignature, VersionedTransaction } from '@solana/web3.js';\nimport { FC, useCallback } from 'react';\nimport { notify } from \"../utils/notifications\";\n\nexport const SendVersionedTransaction: FC = () => {\n    const { connection } = useConnection();\n    const { publicKey, sendTransaction } = useWallet();\n\n    const onClick = useCallback(async () => {\n        if (!publicKey) {\n            notify({ type: 'error', message: `Wallet not connected!` });\n            console.log('error', `Send Transaction: Wallet not connected!`);\n            return;\n        }\n\n        let signature: TransactionSignature = '';\n        try {\n\n            // Create instructions to send, in this case a simple transfer\n            const instructions = [\n                SystemProgram.transfer({\n                    fromPubkey: publicKey,\n                    toPubkey: Keypair.generate().publicKey,\n                    lamports: 1_000_000,\n                }),\n            ];\n\n            // Get the lates block hash to use on our transaction and confirmation\n            let latestBlockhash = await connection.getLatestBlockhash()\n\n            // Create a new TransactionMessage with version and compile it to version 0\n            const messageV0 = new TransactionMessage({\n                payerKey: publicKey,\n                recentBlockhash: latestBlockhash.blockhash,\n                instructions,\n            }).compileToV0Message();\n\n            // Create a new VersionedTransacction to support the v0 message\n            const transation = new VersionedTransaction(messageV0)\n\n            // Send transaction and await for signature\n            signature = await sendTransaction(transation, connection);\n\n            // Await for confirmation\n            await connection.confirmTransaction({ signature, ...latestBlockhash }, 'confirmed');\n\n            console.log(signature);\n            notify({ type: 'success', message: 'Transaction successful!', txid: signature });\n        } catch (error: any) {\n            notify({ type: 'error', message: `Transaction failed!`, description: error?.message, txid: signature });\n            console.log('error', `Transaction failed! ${error?.message}`, signature);\n            return;\n        }\n    }, [publicKey, notify, connection, sendTransaction]);\n\n    return (\n        <div className=\"flex flex-row justify-center\">\n            <div className=\"relative group items-center\">\n                <div className=\"m-1 absolute -inset-0.5 bg-gradient-to-r from-indigo-500 to-fuchsia-500 \n                rounded-lg blur opacity-20 group-hover:opacity-100 transition duration-1000 group-hover:duration-200 animate-tilt\"></div>\n                    <button\n                        className=\"group w-60 m-2 btn animate-pulse bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black\"\n                        onClick={onClick} disabled={!publicKey}\n                        >\n                    <div className=\"hidden group-disabled:block \">\n                        Wallet not connected\n                    </div>\n                    <span className=\"block group-disabled:hidden\" >\n                        Send Versioned Transaction\n                    </span>\n                    </button>\n            </div>\n        </div>\n    );\n};","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\SignMessage.tsx",["118"],"// TODO: SignMessage\nimport { verify } from '@noble/ed25519';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport bs58 from 'bs58';\nimport { FC, useCallback } from 'react';\nimport { notify } from \"../utils/notifications\";\n\nexport const SignMessage: FC = () => {\n    const { publicKey, signMessage } = useWallet();\n\n    const onClick = useCallback(async () => {\n        try {\n            // `publicKey` will be null if the wallet isn't connected\n            if (!publicKey) throw new Error('Wallet not connected!');\n            // `signMessage` will be undefined if the wallet doesn't support it\n            if (!signMessage) throw new Error('Wallet does not support message signing!');\n            // Encode anything as bytes\n            const message = new TextEncoder().encode('Hello, world!');\n            // Sign the bytes using the wallet\n            const signature = await signMessage(message);\n            // Verify that the bytes were signed using the private key that matches the known public key\n            if (!verify(signature, message, publicKey.toBytes())) throw new Error('Invalid signature!');\n            notify({ type: 'success', message: 'Sign message successful!', txid: bs58.encode(signature) });\n        } catch (error: any) {\n            notify({ type: 'error', message: `Sign Message failed!`, description: error?.message });\n            console.log('error', `Sign Message failed! ${error?.message}`);\n        }\n    }, [publicKey, notify, signMessage]);\n\n    return (\n        <div className=\"flex flex-row justify-center\">\n            <div className=\"relative group items-center\">\n                <div className=\"m-1 absolute -inset-0.5 bg-gradient-to-r from-indigo-500 to-fuchsia-500 \n                rounded-lg blur opacity-20 group-hover:opacity-100 transition duration-1000 group-hover:duration-200 animate-tilt\"></div>\n                <button\n                    className=\"group w-60 m-2 btn animate-pulse bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black\"\n                    onClick={onClick} disabled={!publicKey}\n                >\n                    <div className=\"hidden group-disabled:block\">\n                        Wallet not connected\n                    </div>\n                    <span className=\"block group-disabled:hidden\" > \n                        Sign Message \n                    </span>\n                </button>\n            </div>\n        </div>\n    );\n};\n","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\components\\Text\\index.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\contexts\\AutoConnectProvider.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\contexts\\ContextProvider.tsx",["119"],"import { WalletAdapterNetwork, WalletError } from '@solana/wallet-adapter-base';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport {\n    PhantomWalletAdapter,\n    SolflareWalletAdapter,\n    TorusWalletAdapter,\n} from '@solana/wallet-adapter-wallets';\nimport { Cluster, clusterApiUrl } from '@solana/web3.js';\nimport { FC, ReactNode, useCallback, useMemo } from 'react';\nimport { AutoConnectProvider, useAutoConnect } from './AutoConnectProvider';\nimport { notify } from \"../utils/notifications\";\nimport { NetworkConfigurationProvider, useNetworkConfiguration } from './NetworkConfigurationProvider';\nimport dynamic from \"next/dynamic\";\n\nconst ReactUIWalletModalProviderDynamic = dynamic(\n  async () =>\n    (await import(\"@solana/wallet-adapter-react-ui\")).WalletModalProvider,\n  { ssr: false }\n);\n\nconst WalletContextProvider: FC<{ children: ReactNode }> = ({ children }) => {\n    const { autoConnect } = useAutoConnect();\n    const { networkConfiguration } = useNetworkConfiguration();\n    const network = networkConfiguration as WalletAdapterNetwork;\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n    console.log(network);\n\n    const wallets = useMemo(\n        () => [\n            new PhantomWalletAdapter(),\n            new SolflareWalletAdapter(),\n            new TorusWalletAdapter(),\n        ],\n        [network]\n    );\n\n    const onError = useCallback(\n        (error: WalletError) => {\n            notify({ type: 'error', message: error.message ? `${error.name}: ${error.message}` : error.name });\n            console.error(error);\n        },\n        []\n    );\n\n    return (\n        <ConnectionProvider endpoint={endpoint}>\n            <WalletProvider wallets={wallets} onError={onError} autoConnect={autoConnect}>\n                <ReactUIWalletModalProviderDynamic>\n                    {children}\n                </ReactUIWalletModalProviderDynamic>\n            </WalletProvider>\n        </ConnectionProvider>\n    );\n};\n\nexport const ContextProvider: FC<{ children: ReactNode }> = ({ children }) => {\n    return (\n        <>\n            <NetworkConfigurationProvider>\n                <AutoConnectProvider>\n                    <WalletContextProvider>{children}</WalletContextProvider>\n                </AutoConnectProvider>\n            </NetworkConfigurationProvider>\n        </>\n    );\n};\n","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\contexts\\NetworkConfigurationProvider.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\hooks\\useQueryContext.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\models\\types.ts",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\pages\\api\\hello.ts",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\pages\\index.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\pages\\_app.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\pages\\_document.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\stores\\useNotificationStore.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\stores\\useUserSOLBalanceStore.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\utils\\explorer.ts",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\utils\\index.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\utils\\notifications.tsx",[],"C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\views\\home\\index.tsx",["120"],"// Next, React\nimport { FC, useEffect, useState } from 'react';\nimport Link from 'next/link';\n\n// Wallet\nimport { useWallet, useConnection } from '@solana/wallet-adapter-react';\n\n// Components\nimport pkg from '../../../package.json';\nimport { CandyMint } from '../../components/CandyMint';\n\n// Store\nimport useUserSOLBalanceStore from '../../stores/useUserSOLBalanceStore';\n\nexport const HomeView: FC = ({ }) => {\n  const wallet = useWallet();\n  const { connection } = useConnection();\n\n  const balance = useUserSOLBalanceStore((s) => s.balance)\n  const { getUserSOLBalance } = useUserSOLBalanceStore()\n\n  useEffect(() => {\n    if (wallet.publicKey) {\n      console.log(wallet.publicKey.toBase58())\n      getUserSOLBalance(wallet.publicKey, connection)\n    }\n  }, [wallet.publicKey, connection, getUserSOLBalance])\n\n  return (\n\n    <div className=\"md:hero mx-auto p-4\">\n      <div className=\"md:hero-content flex flex-col\">\n        <div className='mt-6'>\n        <h1 className=\"text-center text-5xl md:pl-12 font-bold text-transparent bg-clip-text bg-gradient-to-br from-green-400 to-cyan-600 mb-10\">\n          Sol Alien Cluster\n      </h1>\n        </div>\n        <h4 className=\"md:w-full text-2x1 md:text-4xl text-center text-slate-300 mb-2\">\n          <p>The Sol Alien Cluster is an NFT collection featuring 10,000 unique Aliens.  Own a Sol Alien and support the Solana community.   Connect with like-minded explorers, become the holder of an asset in the next revolutionary cryptocurrency, Solana.</p>\n          <p className='text-slate-500 text-2x1 leading-relaxed'>Mint live</p>\n        </h4>\n        <div className=\"relative group\">\n          <div className=\"absolute -inset-0.5 bg-gradient-to-r from-indigo-500 to-cyan-500 rounded-lg blur opacity-40 animate-tilt\"></div>\n          <div>\n            <img\n              src=\"https://salmon-tory-unicorn-148.mypinata.cloud/ipfs/QmaEPaF7BXAehPbGHJWo24hdzLLjrMguMQgUgCYJSRbiuA\"  // Replace with your image path or URL\n              alt=\"Sol Alien Cluster\"\n              className=\"w-full h-auto max-h-80 object-contain\" // Adjust the size as needed\n             />\n          </div>\n        </div>\n        <div className=\"flex flex-col mt-2\">\n          <CandyMint /> \n          <h4 className=\"md:w-full text-2xl text-slate-300 my-2\">\n          {wallet &&\n          <div className=\"flex flex-row justify-center\">\n            \n              <div className='text-slate-600 ml-2'>\n                Get your Solana NFT Now!\n              </div>\n          </div>\n          }\n          </h4>\n        </div>\n      </div>\n    </div>\n  );\n};\n","C:\\Users\\brend\\msac\\mintpage\\dapp-scaffold-main\\src\\views\\index.tsx",[],{"ruleId":"121","severity":1,"message":"122","line":23,"column":15,"nodeType":"123","endLine":23,"endColumn":88},{"ruleId":"124","severity":1,"message":"125","line":31,"column":9,"nodeType":"126","endLine":31,"endColumn":105,"suggestions":"127"},{"ruleId":"124","severity":1,"message":"128","line":81,"column":8,"nodeType":"126","endLine":81,"endColumn":83,"suggestions":"129"},{"ruleId":"124","severity":1,"message":"130","line":55,"column":8,"nodeType":"126","endLine":55,"endColumn":56,"suggestions":"131"},{"ruleId":"124","severity":1,"message":"130","line":55,"column":8,"nodeType":"126","endLine":55,"endColumn":56,"suggestions":"132"},{"ruleId":"124","severity":1,"message":"130","line":28,"column":8,"nodeType":"126","endLine":28,"endColumn":40,"suggestions":"133"},{"ruleId":"124","severity":1,"message":"134","line":35,"column":9,"nodeType":"126","endLine":35,"endColumn":18,"suggestions":"135"},{"ruleId":"121","severity":1,"message":"122","line":45,"column":13,"nodeType":"123","endLine":49,"endColumn":16},"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Use `<Image />` from `next/image` instead to utilize Image Optimization. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useMemo has unnecessary dependencies: 'createUmi', 'mplCandyMachine', 'mplTokenMetadata', 'quicknodeEndpoint', and 'walletAdapterIdentity'. Either exclude them or remove the dependency array. Outer scope values like 'mplCandyMachine' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["136"],"React Hook useCallback has unnecessary dependencies: 'candyMachineAddress' and 'treasury'. Either exclude them or remove the dependency array. Outer scope values like 'candyMachineAddress' aren't valid dependencies because mutating them doesn't re-render the component.",["137"],"React Hook useCallback has an unnecessary dependency: 'notify'. Either exclude it or remove the dependency array. Outer scope values like 'notify' aren't valid dependencies because mutating them doesn't re-render the component.",["138"],["139"],["140"],"React Hook useMemo has an unnecessary dependency: 'network'. Either exclude it or remove the dependency array.",["141"],{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"146","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},"Update the dependencies array to be: [wallet]",{"range":"153","text":"154"},"Update the dependencies array to be: [wallet, connection, getUserSOLBalance, umi]",{"range":"155","text":"156"},"Update the dependencies array to be: [publicKey, connection, sendTransaction]",{"range":"157","text":"158"},{"range":"159","text":"158"},"Update the dependencies array to be: [publicKey, signMessage]",{"range":"160","text":"161"},"Update the dependencies array to be: []",{"range":"162","text":"163"},[1587,1683],"[wallet]",[3657,3732],"[wallet, connection, getUserSOLBalance, umi]",[2395,2443],"[publicKey, connection, sendTransaction]",[2361,2409],[1458,1490],"[publicKey, signMessage]",[1375,1384],"[]"]