import { fromWeb3JsPublicKey, fromWeb3JsTransaction, toWeb3JsTransaction } from '@metaplex-foundation/umi-web3js-adapters';
import { UninitializedWalletAdapterError, OperationNotSupportedByWalletAdapterError } from './errors.mjs';

const createSignerFromWalletAdapter = walletAdapter => ({
  get publicKey() {
    if (!walletAdapter.publicKey) {
      throw new UninitializedWalletAdapterError();
    }
    return fromWeb3JsPublicKey(walletAdapter.publicKey);
  },
  async signMessage(message) {
    if (walletAdapter.signMessage === undefined) {
      throw new OperationNotSupportedByWalletAdapterError('signMessage');
    }
    return walletAdapter.signMessage(message);
  },
  async signTransaction(transaction) {
    if (walletAdapter.signTransaction === undefined) {
      throw new OperationNotSupportedByWalletAdapterError('signTransaction');
    }
    return fromWeb3JsTransaction(await walletAdapter.signTransaction(toWeb3JsTransaction(transaction)));
  },
  async signAllTransactions(transactions) {
    if (walletAdapter.signAllTransactions === undefined) {
      throw new OperationNotSupportedByWalletAdapterError('signAllTransactions');
    }
    const web3JsTransactions = transactions.map(toWeb3JsTransaction);
    const signedTransactions = await walletAdapter.signAllTransactions(web3JsTransactions);
    return signedTransactions.map(fromWeb3JsTransaction);
  }
});

export { createSignerFromWalletAdapter };
//# sourceMappingURL=createSignerFromWalletAdapter.mjs.map
